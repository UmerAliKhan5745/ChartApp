name: CI/CD Pipeline for MERN App

on:
  push:
    branches:
      - main # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main # Trigger the workflow on pull request to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Install dependencies and build the frontend
      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          npm run build

      # Install dependencies and prepare the backend
      - name: Install and prepare backend
        working-directory: backend
        run: |
          npm install --legacy-peer-deps

      # Docker build and push to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Build the Docker image
          docker build -t umerali5745/mydockerhubuser:latest .

          # Push the Docker image to Docker Hub
          docker push umerali5745/mydockerhubuser:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Connect to AWS EC2 using SSH and deploy
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            # Debugging output
            echo "Starting deployment..."

            # Check Docker installation
            echo "Checking if Docker is installed..."
            if ! [ -x "$(command -v docker)" ]; then
              echo "Docker is not installed. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi

            # Pull the Docker image from Docker Hub
            echo "Pulling Docker image from Docker Hub..."
            docker pull umerali5745/mydockerhubuser:latest

            # Stop and remove the existing container (if any)
            echo "Stopping and removing existing container (if any)..."
            docker stop mydockerhubuser || true
            docker rm mydockerhubuser || true

            # Run the new Docker container with environment variables
            echo "Running the new Docker container..."
            docker run -d -p 5000:5000 --name mydockerhubuser \
              -e NODE_ENV=${{ secrets.NODE_ENV }} \
              -e MONGODB_URL=${{ secrets.MONGODB_URL }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e PORT=${{ secrets.PORT }} \
              -e CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }} \
              umerali5745/mydockerhubuser:latest

            # Verify if the container is running
            echo "Checking if the container is running..."
            docker ps

            # Restart Nginx if necessary
            echo "Restarting Nginx (if needed)..."
            sudo systemctl restart nginx || true

            echo "Deployment completed successfully."
